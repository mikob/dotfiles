# timing, ~0.21s x1c7 7/2021
#         ~0.1s  x1c7 2/2022
# to test timing:
#    for i in $(seq 1 10); do /usr/bin/time $SHELL -i -c exit; done
# Uncomment the following to profile (comment 1/2, see bottom of file for 2/2):
# zmodload zsh/zprof

export KEYTIMEOUT=1       # elimate delay with switching to vi mode
# RVM seems to be loaded quickly, so we don't need to lazy load
export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
export PATH=$PATH:$HOME/.zgen/jimeh/tmuxifier-master/bin
export PATH=/snap/bin:$PATH
export PATH=/usr/bin:$PATH     # hack to give /usr/bin priority
export PATH="$HOME/tools/google_appengine/":$PATH
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
export EDITOR=nvim
export INPUTRC=$HOME/.inputrc
export DEV_ENV=1
export NODE_ENV=development
export NODE_OPTIONS="$NODE_OPTIONS --max_old_space_size=4096"
export LC_ALL=en_US.UTF-8
export TMUXIFIER=$HOME/.zgen/jimeh/tmuxifier-master
export FZF_DEFAULT_COMMAND='ag --hidden -g "" -U'
export PIP_PROCESS_DEPENDENCY_LINKS=1
export NNN_TRASH=1
export NNN_PLUG='o:fzopen;p:mocplay;d:diffs;m:nmount;n:notes;v:imgviu;t:imgthumb'
export PAGER=less # needs to be explicit for kitty it appears
# Install Ruby Gems to ~/gems
export GEM_HOME="$HOME/gems"
export PATH="$HOME/gems/bin:$PATH"
# Android SDK
export ANDROID_HOME=~/tools/Android/Sdk
export PATH=$ANDROID_HOME:$PATH

# zsh vi mode cursor styling
MODE_CURSOR_VIINS="#ffffff blinking bar"
MODE_CURSOR_REPLACE="$MODE_CURSOR_VIINS #ff0000"
MODE_CURSOR_VICMD="#7d7748 block"
MODE_CURSOR_VISUAL="$MODE_CURSOR_VICMD steady bar"
MODE_CURSOR_VLINE="$MODE_CURSOR_VISUAL #00ffff"

# Setup fzf
# ---------
if [[ ! "$PATH" == */home/mikob/.zgen/junegunn/fzf-master/bin* ]]; then
  export PATH="${PATH:+${PATH}:}/home/mikob/.zgen/junegunn/fzf-master/bin"
fi

# Fzf Auto-completion
# ---------------
[[ $- == *i* ]] && source "/home/mikob/.zgen/junegunn/fzf-master/shell/completion.zsh" 2> /dev/null

# IMPORTANT:
# Need to edit zgen save file manually anytime it's changed to make sure autoenv loads after python in order for
# .autoenv.zsh to work properly with workon command
# load zgen
source "${HOME}/.zgen/zgen.zsh"
if ! zgen saved; then
    zgen prezto prompt theme 'miko'
    zstyle ':prezto:*:*' color 'yes'

    zgen prezto
    zgen prezto git
    zgen prezto completion
    #zgen prezto python
    zgen prezto command-not-found
    #zgen prezto syntax-highlighting
    zgen prezto ssh
    zgen prezto tmux
    # zgen prezto autosuggestions
    # zgen prezto history-substring-search # causes issues with ctrl-y

    # these two have prezto modules but the autosuggestions are white (instead of grey)
    # when using the prezto versions
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-autosuggestions

    zgen load Tarrasch/zsh-autoenv
    zgen load jimeh/tmuxifier
    # adds 0.3s to startup
    #zgen load felixr/docker-zsh-completion

    # folder bookmarks
    zgen load urbainvaes/fzf-marks

    # cursor shape for vim mode
    zgen load softmoth/zsh-vim-mode

    # notification when long running command finishes
    # got annoying when using vim terminals not recognizing that the window was open - giving
    # notifications for practically all commands.
    # zgen load mikob/zsh-auto-notify

    zgen save
fi

setopt vi 	 	  # edit command in vi mode
setopt auto_cd  	  # no need to type cd, just type the command name
setopt clobber  	  # zsh disable certain redirection warnings
setopt auto_pushd
setopt correct
unsetopt histverify

autoload -U zmv    	  # fancy file mover with substitutions

bindkey '^u' backward-kill-line
bindkey '^r' history-incremental-search-backward
bindkey '^p' fzf-file-widget
bindkey '^l' autosuggest-execute
bindkey '^e' end-of-line
bindkey '^b' fzm

# Fzf Key bindings
# IMPORTANT these have been modified to let tab=select and enter=execute
# https://github.com/junegunn/fzf/issues/477#issuecomment-631707533
source "/home/mikob/.zgen/junegunn/fzf-master/shell/key-bindings.zsh"

# only the first of each command has an alias searched for. So
# make the last character a space, so the next word following the alias
# is also checked for expansion
alias sudo='sudo '
alias rm="trash-put"
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias opn="xdg-open ./"
alias fnd="find ./ -iname $@"
alias ls="ls -h --color=auto"
alias info="info --vi-keys"
alias dkrm="docker ps -aqf 'status=exited' | xargs -L 1 docker rm -f"
alias dkrmi="docker images -f 'dangling=true' -q | xargs docker rmi"
alias cp='cp -i'
alias mv='mv -i'
alias make='make -j4'
alias grep='grep -i'
alias rsync='rsync -zav'
alias dl='docker logs -f --tail 1000'
alias rbd="echo \"keys $@\" | xargs redis-cli | cut --delimiter ' ' -f 1 | xargs redis-cli DEL"
# Fix cinnamon when it get's f'd up
alias cinnrestart='pkill -HUP -f "cinnamon --replace"'
alias rmfont='rm ~/.local/share/fonts/$@ && sudo fc-cache -fv'
alias y='yarn'
alias md='STASH_OUTPUT=$(git stash save "Temp stash for md alias"); if [[ $STASH_OUTPUT == *"No local changes to save"* ]]; then git checkout master && git merge dev -m "merge from dev" && git push && git checkout dev; else git checkout master && git merge dev -m "merge from dev" && git push && git checkout dev && git stash pop; fi'
alias ssh='kitty +kitten ssh'

# Miko's custom shell functions
function cds() { cd "$@" && ls; }

function swp() { mv "$1" "$1.swap" && mv "$2" "$1" && mv "$1.swap" "$2" }

function rmhist() {
    args="$@"
    if [ "${#args}" -gt 2 ]
    then
	grep -v "$@" ~/.zsh_history > ~/.zsh_history_backup && swp ~/.zsh_history ~/.zsh_history_backup
    else
	echo "argument should be at least 3 characters"
    fi
}

function dksr() { docker stop "$1" && docker rm "$1"; }

function unz() { unzip "$@" && rm "$@"; }

# custom open search results in vim
function agvim() {
    ag "$@" && read;
    vim "-c bufdo /$@" $(ag -l $@);
}

vicd()
{
    local dst="$(command vifm --choose-dir -)"
    if [ -z "$dst" ]; then
	    echo 'Directory picking cancelled/failed'
	    return 1
    fi
    cd "$dst"
}

unset_docker()
{
    unset DOCKER_TLS_VERIFY
    unset DOCKER_HOST
    unset DOCKER_CERT_PATH
    unset DOCKER_API_VERSION
}

stopwatch() {
    start=$(date +%s)
    while true; do
        time="$(( $(date +%s) - $start))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
}

[ -f "$HOME/.zshrc-custom" ] && source "$HOME/.zshrc-custom"
[ -s $HOME/.rvm/scripts/rvm ] && . "$HOME/.rvm/scripts/rvm"
#source <(kubectl completion zsh)     # kubernetes auto-completion is slow (0.3s)

# if we're in neovim, make vim cmd in nvim terminal open up in the current vim session
if [ -n "${NVIM_LISTEN_ADDRESS+1}" ]; then
    alias vim="nvr"
fi

# hack to get things running after zshrc is loaded in gnome-terminal
# eg. gnome-terminal -x sh -c 'export POST_RC="echo hi"; exec zsh'
eval "$POST_RC"
export PATH=~/.npm-global/node/bin:~/.npm-global/bin:$PATH
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# notification when a long running command finishes
AUTO_NOTIFY_IGNORE+=("git diff" "mosh" "g d" "git d" "g diff")
AUTO_NOTIFY_EXPIRE_TIME=2500
# export AUTO_NOTIFY_IGNORE_WINDOW_CHECK=true
export PATH="$HOME/tools/monorepo-tools:$PATH"

source "$HOME/.cargo/env"

# histdb (better zsh history)
source $HOME/.oh-my-zsh/custom/plugins/zsh-histdb/sqlite-history.zsh
autoload -Uz add-zsh-hook

source /home/mikob/.config/broot/launcher/bash/br
eval "$(zoxide init zsh --cmd cd)"

# uncomment the following to profile 2/2
# zprof

# pnpm
export PNPM_HOME="/home/mikob/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# bun completions
[ -s "/home/mikob/.bun/_bun" ] && source "/home/mikob/.bun/_bun"

# bun
export BUN_INSTALL="/home/mikob/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

 #>>> conda initialize >>>
 #!! Contents within this block are managed by 'conda init' !!
 #__conda_setup="$('/home/mikob/tools/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
 #if [ $? -eq 0 ]; then
     #eval "$__conda_setup"
 #else
     #if [ -f "/home/mikob/tools/anaconda3/etc/profile.d/conda.sh" ]; then
	 #. "/home/mikob/tools/anaconda3/etc/profile.d/conda.sh"
     #else
	 #export PATH="/home/mikob/tools/anaconda3/bin:$PATH"
     #fi
 #fi
 #unset __conda_setup
 #<<< conda initialize <<<

# fnm (like nvm but faster)
export PATH="/home/mikob/.local/share/fnm:$PATH"
eval "`fnm env`"
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

# Shell-GPT integration ZSH v0.2
_sgpt_zsh() {
if [[ -n "$BUFFER" ]]; then
    _sgpt_prev_cmd=$BUFFER
    BUFFER+="âŒ›"
    zle -I && zle redisplay
    BUFFER=$(sgpt --shell <<< "$_sgpt_prev_cmd" --no-interaction)
    zle end-of-line
fi
}
zle -N _sgpt_zsh
bindkey ^l _sgpt_zsh
# Shell-GPT integration ZSH v0.2
